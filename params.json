{"name":"Rdioh","tagline":"RDIO API wrapper in Haskell","body":"# Rdioh\r\n\r\n## About\r\n\r\nThis package is a near-complete implementation of [Rdio](http://rdio.com)'s API in Haskell.\r\n\r\n## Installation\r\n\r\n    cabal install rdioh\r\n\r\n## Usage\r\n\r\nFirst you need a key and a secret. You can get both [here](http://developer.rdio.com/member/register).\r\n\r\nThen usage is simple:\r\n\r\n```haskell\r\nmain = do\r\n    result <- runRdio key secret $ getTopChartAlbums\r\n    case result of\r\n      Left err -> putStrLn err\r\n      Right albums -> mapM_ (putStrLn . albumName) albums\r\n```\r\nEverything runs in the `Rdio` Monad, which is just the `ReaderT` monad.\r\n\r\n## Authentication\r\n\r\n`runRdio` is for methods that don't require user authentication. Use `runRdioWithAuth` for methods that require user authentication, like `createPlaylist`. If you use `runRdioWithAuth`, your user will see a message like so:\r\n\r\n    open https://www.rdio.com/oauth/authorize?oauth_token=asdaslkjfsd\r\n    oauth_verifier: \r\n\r\nTo complete authentication, he / she will have to open the url, hit 'Allow', and paste the given PIN back into your application.\r\n\r\n## Longer Example\r\n\r\nList all albums for Radiohead:\r\n\r\n```haskell\r\nimport Rdioh\r\nimport Rdioh.Models\r\nimport Control.Monad.IO.Class\r\n\r\nmain = do\r\n    runRdio key secret $ do\r\n      res1 <- search \"Radiohead\" \"Artist\" :: Rdio (Either String [Artist])\r\n      case res1 of\r\n        Left err -> liftIO $ putStrLn err\r\n        Right (radiohead:_) -> do\r\n          res2 <- getAlbumsForArtist (artistKey radiohead)\r\n          case res2 of\r\n            Left err -> liftIO $ putStrLn err\r\n            Right albums -> liftIO $ mapM_ (putStrLn . albumName) albums\r\n```\r\n\r\nSee `spec/Main.hs` for an example on each method.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}